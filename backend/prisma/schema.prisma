generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(100)
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  purchases Purchase[]
  tokens    Token[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Token {
  id        String    @id @default(cuid())
  token     String    @unique
  type      TokenType
  expiresAt DateTime  @map("expires_at")
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum TokenType {
  ACCESS
  REFRESH
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Sweet {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(100)
  description String?      @db.Text
  category    SweetCategory
  price       Decimal      @db.Decimal(10, 2)
  imageUrl    String?      @map("image_url") @db.VarChar(500)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  inventory Inventory?
  purchases Purchase[]

  @@map("sweets")
}


enum SweetCategory {
  CHOCOLATES
  CANDIES
  CAKES
  COOKIES
  PASTRIES
  ICE_CREAM
  GUMMIES
  HARD_CANDIES
  LOLLIPOPS
  TRUFFLES
}


model Inventory {
  id               String   @id @default(cuid())
  quantity         Int      @default(0)
  minStockLevel    Int      @default(0) @map("min_stock_level")
  maxStockLevel    Int      @default(1000) @map("max_stock_level")
  reorderPoint     Int      @default(10) @map("reorder_point")
  lastRestockedAt  DateTime? @map("last_restocked_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")


  sweet   Sweet  @relation(fields: [sweetId], references: [id], onDelete: Cascade)
  sweetId String @unique @map("sweet_id")


  stockMovements StockMovement[]

  @@map("inventory")
}


model StockMovement {
  id          String            @id @default(cuid())
  type        StockMovementType
  quantity    Int 
  reason      String?           @db.VarChar(255)
  reference   String?           @db.VarChar(100) 
  createdAt   DateTime          @default(now()) @map("created_at")

 
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @map("inventory_id")

  @@map("stock_movements")
}


enum StockMovementType {       
  RESTOCK               
  RETURN         
}


model Purchase {
  id          String          @id @default(cuid())
  orderNumber   String        @unique @db.VarChar(20) 
  quantity    Int             @default(1) 
  unitPrice   Decimal         @db.Decimal(10, 2) @map("unit_price") 
  totalAmount Decimal         @db.Decimal(10, 2) @map("total_amount") 
  status      PurchaseStatus  @default(PENDING)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @map("user_id")
  sweet   Sweet  @relation(fields: [sweetId], references: [id], onDelete: Restrict)
  sweetId String @map("sweet_id")

  @@map("purchases")
}


enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
  RETURNED
}


